<?xml version="1.0" encoding="UTF-8"?>
<launch>

  <arg name="state" default="localization"/>

  <arg name="planner"        default="base"/>
  <arg name="global_planner" default="global_planner"/>
  <arg name="local_planner"  default="pal"/>
  <arg name="localization"   default="amcl"/>
  <arg name="mapping"        default="karto"/>
  <arg name="octomap"        default="false"/>
  <arg name="robot_namespace"   default=""/>
  <arg name="scan_topic"    default="scan_raw"/>
  <arg name="laser_model"    default="sick-571"/>
  <arg name="use_rgbd"       default="true"/>



  <arg name="map" default="$(env HOME)/.pal/pmb3_maps/config"/>

  <!-- Localization or Mapping state -->
  <node pkg="pal_navigation_sm" type="navigation.sh" name="navigation"
        args="pmb3 $(arg state) $(arg localization) $(arg mapping) $(arg map) $(arg octomap) $(arg scan_topic) $(arg laser_model) $(arg robot_namespace)"/>

  <!-- Navigation State Machine -->
  <include file="$(find pmb3_2dnav)/launch/state_machine.launch">
    <arg name="state" value="$(arg state)"/>
    <arg name="map_frame" value="/$(arg robot_namespace)/map"/>
    <arg name="base_frame" value="/$(arg robot_namespace)/base_footprint"/>
  </include>

  <!-- Planning -->
  <include file="$(find pmb3_2dnav)/launch/move_$(arg planner).launch">
    <arg name="global_planner" value="$(arg global_planner)"/>
    <arg name="local_planner"  value="$(arg local_planner)"/>
    <arg name="robot_namespace"      value="$(arg robot_namespace)"/>
  </include>

  <include file="$(find robot_pose)/launch/robot_pose.launch">
    <arg name="robot_prefix"      value="$(arg robot_namespace)"/>
  </include>
  
  <!-- Laser filter (empty for public sim) -->
  <node name="laser_filter" pkg="laser_filters" type="scan_to_scan_filter_chain">
    <rosparam file="$(find pmb3_laser_sensors)/config/$(arg laser_model)_filter.yaml" command="load"/>
    <remap from="scan"          to="scan_raw"/>
    <remap from="scan_filtered" to="scan"/>
  </node>
  
  
  <!-- VO map server -->
  <include file="$(find pal_vo_server)/launch/vo_server.launch"/>

  <!-- Highways -->
  <include file="$(find highways_server)/launch/highways_server.launch"/>
    

  <group if="$(arg use_rgbd)">
    <arg name="filter_suffix" value="realsense"/>

  <!-- pcl filter for base rgbd camera -->
  <node name="base_rgbd_camera_filter" pkg="pal_pcl" type="pal_stockbot_floor_filter_node" output="screen">
    <remap from="cloud1" to="/base_rgbd_camera/depth/color/points"/>
    <rosparam command="load" file="$(find pmb3_rgbd_sensors)/config/base_floor_filter_$(arg filter_suffix).yaml" />
  </node>

  <!-- pcl filter for roof rgbd camera -->
  <node name="roof_rgbd_camera_filter" pkg="pal_pcl" type="pal_stockbot_floor_filter_node" output="screen">
    <remap from="cloud1" to="/roof_rgbd_camera/depth/color/points"/>
    <rosparam command="load" file="$(find pmb3_rgbd_sensors)/config/roof_floor_filter_$(arg filter_suffix).yaml" />
  </node>
  </group>

  <group unless="$(arg use_rgbd)">
    <param name="/move_base/global_costmap/obstacle_rgbd_layer/enabled" value="false" />
    <param name="/move_base/local_costmap/obstacle_rgbd_layer/enabled" value="false" />
  </group>

    
</launch>
